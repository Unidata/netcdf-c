# Makefile.in generated by automake 1.16.5 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2021 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

# Copyright 2018, see the COPYRIGHT file for more information.

# This file builds and runs DAP4 tests.

# This is part of the netCDF package.
# Copyright 2018 University Corporation for Atmospheric Research/Unidata
# See COPYRIGHT file for conditions of use.
#
# Assemble the CPPFLAGS and LDFLAGS that point to all the needed
# libraries for netCDF-4.
#

VPATH = @srcdir@
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
@USE_DAP_TRUE@am__append_1 = -I${top_srcdir}/oc2
@NETCDF_ENABLE_NCZARR_TRUE@am__append_2 = -I${top_srcdir}/libnczarr
@NETCDF_ENABLE_S3_AWS_TRUE@am__append_3 = -lstdc++

# => tinyxml2
@NETCDF_ENABLE_LIBXML2_FALSE@am__append_4 = -lstdc++
check_PROGRAMS = ut_map$(EXEEXT) ut_mapapi$(EXEEXT) ut_map$(EXEEXT) \
	ut_json$(EXEEXT) test_fillonlyz$(EXEEXT) \
	test_quantize$(EXEEXT) test_notzarr$(EXEEXT) $(am__EXEEXT_1) \
	$(am__EXEEXT_2) $(am__EXEEXT_3) $(am__EXEEXT_4) \
	$(am__EXEEXT_5) $(am__EXEEXT_6) $(am__EXEEXT_7)
TESTS = $(am__EXEEXT_10) $(am__append_7) $(am__append_8) \
	$(am__append_9) $(am__append_10) $(am__EXEEXT_11) \
	$(am__append_13) $(am__append_15) $(am__append_16) \
	$(am__append_17) $(am__EXEEXT_4) $(am__append_20) \
	$(am__append_21) $(am__append_23) $(am__append_25) \
	$(am__append_26) $(am__append_27)
@USE_HDF5_TRUE@am__append_5 = test_zchunks test_zchunks2 test_zchunks3 \
@USE_HDF5_TRUE@	test_unlim_vars test_put_vars_two_unlim_dim \
@USE_HDF5_TRUE@	test_unlim_io
@USE_HDF5_TRUE@am__append_6 = test_put_vars_two_unlim_dim
@NETCDF_BUILD_UTILITIES_TRUE@am__append_7 = run_ut_misc.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_ut_map.sh run_ut_mapapi.sh
@AX_DISABLE_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__append_8 = run_ut_chunk.sh
@NETCDF_BUILD_UTILITIES_TRUE@am__append_9 = run_ncgen4.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_quantize.sh run_purezarr.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_interop.sh run_misc.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_nczarr_fill.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_jsonconvention.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_strings.sh run_scalar.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	run_nulls.sh run_notzarr.sh
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_EXTERNAL_SERVER_TESTS_TRUE@am__append_10 = run_external.sh

# Unlimited Dimension tests (at least in part)
@NETCDF_BUILD_UTILITIES_TRUE@am__append_11 = run_mud.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	test_unlim_vars

# Unlimited Dimension tests
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@am__append_12 = test_chunking
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@am__append_13 =  \
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@	run_nccopy5.sh \
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@	run_unlim_io.sh \
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@	run_nccopyz.sh
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__append_14 = test_writecaching \
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	test_readcaching \
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	test_chunkcases
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__append_15 = run_cachetest.sh
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_NCZARR_ZIP_TRUE@am__append_16 = run_newformat.sh
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__append_17 = run_chunkcases.sh
@NETCDF_BUILD_UTILITIES_TRUE@am__append_18 = test_endians
@NETCDF_BUILD_UTILITIES_TRUE@am__append_19 = test_endians
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@am__append_20 = run_fillonlyz.sh

# Test back compatibility of old key format
@NETCDF_BUILD_UTILITIES_TRUE@am__append_21 = run_oldkeys.sh
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__append_22 = bm_chunks3

# The perf tests need modernization
@AX_DISABLE_TRUE@@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__append_23 = run_perf_chunks1.sh

# Do simple filter functionality tests for nczarr

# Echo filter tests from nc_test4
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@am__append_24 = test_filter_avail \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	test_filter_vlen \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	test_nczfilter \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_misc \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_order \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_repeat \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_multi
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@am__append_25 = run_filter_vlen.sh \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	run_filter_misc.sh \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	run_nczfilter.sh \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	run_filter.sh \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	run_specific_filters.sh

# This test is too dangerous to run in a parallel make environment.
# It causes race conditions. So suppress and only test by hand.
@AX_DISABLE_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@am__append_26 = run_unknown.sh

# Test various corrupted files
@NETCDF_BUILD_UTILITIES_TRUE@am__append_27 = run_corrupt.sh
noinst_PROGRAMS = zhex$(EXEEXT) zisjson$(EXEEXT) zmapio$(EXEEXT) \
	zs3parse$(EXEEXT) $(am__EXEEXT_8) $(am__EXEEXT_9)
@NETCDF_ENABLE_S3_TRUE@am__append_28 = s3util 
@NETCDF_ENABLE_S3_AWS_TRUE@@NETCDF_ENABLE_S3_TESTALL_TRUE@@NETCDF_ENABLE_S3_TRUE@am__append_29 = tst_pure_awssdk
@NETCDF_ENABLE_S3_AWS_TRUE@@NETCDF_ENABLE_S3_TESTALL_TRUE@@NETCDF_ENABLE_S3_TRUE@am__append_30 = -std=c++11

# Given a netcdf4|NCZarr file, dump the actual chunk contents.
# Used to validate nczarr chunking code.
@ENABLE_NCDUMPCHUNKS_TRUE@am__append_31 = -I$(top_srcdir)/libnczarr
@ENABLE_NCDUMPCHUNKS_TRUE@am__append_32 = ncdumpchunks
subdir = nczarr_test
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/libtool.m4 \
	$(top_srcdir)/m4/ltoptions.m4 $(top_srcdir)/m4/ltsugar.m4 \
	$(top_srcdir)/m4/ltversion.m4 $(top_srcdir)/m4/lt~obsolete.m4 \
	$(top_srcdir)/acinclude.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = timer_utils.h timer_utils.c test_filter.c \
	test_filter_misc.c tst_multifilter.c test_filter_repeat.c \
	test_filter_order.c
CONFIG_CLEAN_VPATH_FILES =
@USE_HDF5_TRUE@am__EXEEXT_1 = test_zchunks$(EXEEXT) \
@USE_HDF5_TRUE@	test_zchunks2$(EXEEXT) test_zchunks3$(EXEEXT) \
@USE_HDF5_TRUE@	test_unlim_vars$(EXEEXT) \
@USE_HDF5_TRUE@	test_put_vars_two_unlim_dim$(EXEEXT) \
@USE_HDF5_TRUE@	test_unlim_io$(EXEEXT)
@NETCDF_BUILD_UTILITIES_TRUE@@USE_HDF5_TRUE@am__EXEEXT_2 = test_chunking$(EXEEXT)
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__EXEEXT_3 = test_writecaching$(EXEEXT) \
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	test_readcaching$(EXEEXT) \
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	test_chunkcases$(EXEEXT)
@NETCDF_BUILD_UTILITIES_TRUE@am__EXEEXT_4 = test_endians$(EXEEXT)
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__EXEEXT_5 = bm_chunks3$(EXEEXT)
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@am__EXEEXT_6 = test_filter_avail$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	test_filter_vlen$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	test_nczfilter$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_misc$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_order$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_repeat$(EXEEXT) \
@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@	testfilter_multi$(EXEEXT)
@NETCDF_ENABLE_S3_AWS_TRUE@@NETCDF_ENABLE_S3_TESTALL_TRUE@@NETCDF_ENABLE_S3_TRUE@am__EXEEXT_7 = tst_pure_awssdk$(EXEEXT)
@NETCDF_ENABLE_S3_TRUE@am__EXEEXT_8 = s3util$(EXEEXT)
@ENABLE_NCDUMPCHUNKS_TRUE@am__EXEEXT_9 = ncdumpchunks$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am__bm_chunks3_SOURCES_DIST = bm_chunks3.c bm_utils.c timer_utils.c \
	test_utils.c bm_utils.h bm_timer.h
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am__objects_1 = bm_utils.$(OBJEXT) \
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	timer_utils.$(OBJEXT) \
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	test_utils.$(OBJEXT)
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am_bm_chunks3_OBJECTS = bm_chunks3.$(OBJEXT) \
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	$(am__objects_1)
bm_chunks3_OBJECTS = $(am_bm_chunks3_OBJECTS)
bm_chunks3_LDADD = $(LDADD)
bm_chunks3_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
am__ncdumpchunks_SOURCES_DIST = ncdumpchunks.c
@ENABLE_NCDUMPCHUNKS_TRUE@am_ncdumpchunks_OBJECTS =  \
@ENABLE_NCDUMPCHUNKS_TRUE@	ncdumpchunks.$(OBJEXT)
ncdumpchunks_OBJECTS = $(am_ncdumpchunks_OBJECTS)
ncdumpchunks_LDADD = $(LDADD)
ncdumpchunks_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am__s3util_SOURCES_DIST = s3util.c
@NETCDF_ENABLE_S3_TRUE@am_s3util_OBJECTS = s3util.$(OBJEXT)
s3util_OBJECTS = $(am_s3util_OBJECTS)
s3util_LDADD = $(LDADD)
s3util_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am__test_chunkcases_SOURCES_DIST = test_chunkcases.c test_utils.c \
	test_utils.h
am__objects_2 = test_utils.$(OBJEXT)
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@am_test_chunkcases_OBJECTS = test_chunkcases.$(OBJEXT) \
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@	$(am__objects_2)
test_chunkcases_OBJECTS = $(am_test_chunkcases_OBJECTS)
test_chunkcases_LDADD = $(LDADD)
test_chunkcases_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_chunking_SOURCES = test_chunking.c
test_chunking_OBJECTS = test_chunking.$(OBJEXT)
test_chunking_LDADD = $(LDADD)
test_chunking_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_endians_SOURCES = test_endians.c
test_endians_OBJECTS = test_endians.$(OBJEXT)
test_endians_LDADD = $(LDADD)
test_endians_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_test_fillonlyz_OBJECTS = test_fillonlyz.$(OBJEXT) $(am__objects_2)
test_fillonlyz_OBJECTS = $(am_test_fillonlyz_OBJECTS)
test_fillonlyz_LDADD = $(LDADD)
test_fillonlyz_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_filter_avail_SOURCES = test_filter_avail.c
test_filter_avail_OBJECTS = test_filter_avail.$(OBJEXT)
test_filter_avail_LDADD = $(LDADD)
test_filter_avail_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_filter_vlen_SOURCES = test_filter_vlen.c
test_filter_vlen_OBJECTS = test_filter_vlen.$(OBJEXT)
test_filter_vlen_LDADD = $(LDADD)
test_filter_vlen_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_nczfilter_SOURCES = test_nczfilter.c
test_nczfilter_OBJECTS = test_nczfilter.$(OBJEXT)
test_nczfilter_LDADD = $(LDADD)
test_nczfilter_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_notzarr_SOURCES = test_notzarr.c
test_notzarr_OBJECTS = test_notzarr.$(OBJEXT)
test_notzarr_LDADD = $(LDADD)
test_notzarr_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am__test_put_vars_two_unlim_dim_SOURCES_DIST =  \
	test_put_vars_two_unlim_dim.c test_utils.c test_utils.h
@USE_HDF5_TRUE@am_test_put_vars_two_unlim_dim_OBJECTS =  \
@USE_HDF5_TRUE@	test_put_vars_two_unlim_dim.$(OBJEXT) \
@USE_HDF5_TRUE@	$(am__objects_2)
test_put_vars_two_unlim_dim_OBJECTS =  \
	$(am_test_put_vars_two_unlim_dim_OBJECTS)
test_put_vars_two_unlim_dim_LDADD = $(LDADD)
test_put_vars_two_unlim_dim_DEPENDENCIES =  \
	${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_quantize_SOURCES = test_quantize.c
test_quantize_OBJECTS = test_quantize.$(OBJEXT)
test_quantize_LDADD = $(LDADD)
test_quantize_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_readcaching_SOURCES = test_readcaching.c
test_readcaching_OBJECTS = test_readcaching.$(OBJEXT)
test_readcaching_LDADD = $(LDADD)
test_readcaching_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am__test_unlim_io_SOURCES_DIST = test_unlim_io.c test_utils.c \
	test_utils.h
@USE_HDF5_TRUE@am_test_unlim_io_OBJECTS = test_unlim_io.$(OBJEXT) \
@USE_HDF5_TRUE@	$(am__objects_2)
test_unlim_io_OBJECTS = $(am_test_unlim_io_OBJECTS)
test_unlim_io_LDADD = $(LDADD)
test_unlim_io_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_unlim_vars_SOURCES = test_unlim_vars.c
test_unlim_vars_OBJECTS = test_unlim_vars.$(OBJEXT)
test_unlim_vars_LDADD = $(LDADD)
test_unlim_vars_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_writecaching_SOURCES = test_writecaching.c
test_writecaching_OBJECTS = test_writecaching.$(OBJEXT)
test_writecaching_LDADD = $(LDADD)
test_writecaching_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_zchunks_SOURCES = test_zchunks.c
test_zchunks_OBJECTS = test_zchunks.$(OBJEXT)
test_zchunks_LDADD = $(LDADD)
test_zchunks_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_zchunks2_SOURCES = test_zchunks2.c
test_zchunks2_OBJECTS = test_zchunks2.$(OBJEXT)
test_zchunks2_LDADD = $(LDADD)
test_zchunks2_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
test_zchunks3_SOURCES = test_zchunks3.c
test_zchunks3_OBJECTS = test_zchunks3.$(OBJEXT)
test_zchunks3_LDADD = $(LDADD)
test_zchunks3_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
testfilter_SOURCES = testfilter.c
testfilter_OBJECTS = testfilter.$(OBJEXT)
testfilter_LDADD = $(LDADD)
testfilter_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
testfilter_misc_SOURCES = testfilter_misc.c
testfilter_misc_OBJECTS = testfilter_misc.$(OBJEXT)
testfilter_misc_LDADD = $(LDADD)
testfilter_misc_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
testfilter_multi_SOURCES = testfilter_multi.c
testfilter_multi_OBJECTS = testfilter_multi.$(OBJEXT)
testfilter_multi_LDADD = $(LDADD)
testfilter_multi_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
testfilter_order_SOURCES = testfilter_order.c
testfilter_order_OBJECTS = testfilter_order.$(OBJEXT)
testfilter_order_LDADD = $(LDADD)
testfilter_order_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
testfilter_repeat_SOURCES = testfilter_repeat.c
testfilter_repeat_OBJECTS = testfilter_repeat.$(OBJEXT)
testfilter_repeat_LDADD = $(LDADD)
testfilter_repeat_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am__tst_pure_awssdk_SOURCES_DIST = tst_pure_awssdk.cpp
@NETCDF_ENABLE_S3_AWS_TRUE@@NETCDF_ENABLE_S3_TESTALL_TRUE@@NETCDF_ENABLE_S3_TRUE@am_tst_pure_awssdk_OBJECTS = tst_pure_awssdk.$(OBJEXT)
tst_pure_awssdk_OBJECTS = $(am_tst_pure_awssdk_OBJECTS)
tst_pure_awssdk_LDADD = $(LDADD)
tst_pure_awssdk_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am__objects_3 = ut_util.$(OBJEXT) ut_test.$(OBJEXT)
am_ut_json_OBJECTS = ut_json.$(OBJEXT) $(am__objects_3)
ut_json_OBJECTS = $(am_ut_json_OBJECTS)
ut_json_LDADD = $(LDADD)
ut_json_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_ut_map_OBJECTS = ut_map.$(OBJEXT) $(am__objects_3)
ut_map_OBJECTS = $(am_ut_map_OBJECTS)
ut_map_LDADD = $(LDADD)
ut_map_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_ut_mapapi_OBJECTS = ut_mapapi.$(OBJEXT) $(am__objects_3)
ut_mapapi_OBJECTS = $(am_ut_mapapi_OBJECTS)
ut_mapapi_LDADD = $(LDADD)
ut_mapapi_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_zhex_OBJECTS = zhex.$(OBJEXT)
zhex_OBJECTS = $(am_zhex_OBJECTS)
zhex_LDADD = $(LDADD)
zhex_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_zisjson_OBJECTS = zisjson.$(OBJEXT)
zisjson_OBJECTS = $(am_zisjson_OBJECTS)
zisjson_LDADD = $(LDADD)
zisjson_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_zmapio_OBJECTS = zmapio.$(OBJEXT)
zmapio_OBJECTS = $(am_zmapio_OBJECTS)
zmapio_LDADD = $(LDADD)
zmapio_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
am_zs3parse_OBJECTS = zs3parse.$(OBJEXT)
zs3parse_OBJECTS = $(am_zs3parse_OBJECTS)
zs3parse_LDADD = $(LDADD)
zs3parse_DEPENDENCIES = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__maybe_remake_depfiles = depfiles
am__depfiles_remade = ./$(DEPDIR)/bm_chunks3.Po \
	./$(DEPDIR)/bm_utils.Po ./$(DEPDIR)/ncdumpchunks.Po \
	./$(DEPDIR)/s3util.Po ./$(DEPDIR)/test_chunkcases.Po \
	./$(DEPDIR)/test_chunking.Po ./$(DEPDIR)/test_endians.Po \
	./$(DEPDIR)/test_fillonlyz.Po ./$(DEPDIR)/test_filter_avail.Po \
	./$(DEPDIR)/test_filter_vlen.Po ./$(DEPDIR)/test_nczfilter.Po \
	./$(DEPDIR)/test_notzarr.Po \
	./$(DEPDIR)/test_put_vars_two_unlim_dim.Po \
	./$(DEPDIR)/test_quantize.Po ./$(DEPDIR)/test_readcaching.Po \
	./$(DEPDIR)/test_unlim_io.Po ./$(DEPDIR)/test_unlim_vars.Po \
	./$(DEPDIR)/test_utils.Po ./$(DEPDIR)/test_writecaching.Po \
	./$(DEPDIR)/test_zchunks.Po ./$(DEPDIR)/test_zchunks2.Po \
	./$(DEPDIR)/test_zchunks3.Po ./$(DEPDIR)/testfilter.Po \
	./$(DEPDIR)/testfilter_misc.Po ./$(DEPDIR)/testfilter_multi.Po \
	./$(DEPDIR)/testfilter_order.Po \
	./$(DEPDIR)/testfilter_repeat.Po ./$(DEPDIR)/timer_utils.Po \
	./$(DEPDIR)/tst_pure_awssdk.Po ./$(DEPDIR)/ut_json.Po \
	./$(DEPDIR)/ut_map.Po ./$(DEPDIR)/ut_mapapi.Po \
	./$(DEPDIR)/ut_test.Po ./$(DEPDIR)/ut_util.Po \
	./$(DEPDIR)/zhex.Po ./$(DEPDIR)/zisjson.Po \
	./$(DEPDIR)/zmapio.Po ./$(DEPDIR)/zs3parse.Po
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(bm_chunks3_SOURCES) $(ncdumpchunks_SOURCES) \
	$(s3util_SOURCES) $(test_chunkcases_SOURCES) test_chunking.c \
	test_endians.c $(test_fillonlyz_SOURCES) test_filter_avail.c \
	test_filter_vlen.c test_nczfilter.c test_notzarr.c \
	$(test_put_vars_two_unlim_dim_SOURCES) test_quantize.c \
	test_readcaching.c $(test_unlim_io_SOURCES) test_unlim_vars.c \
	test_writecaching.c test_zchunks.c test_zchunks2.c \
	test_zchunks3.c testfilter.c testfilter_misc.c \
	testfilter_multi.c testfilter_order.c testfilter_repeat.c \
	$(tst_pure_awssdk_SOURCES) $(ut_json_SOURCES) \
	$(ut_map_SOURCES) $(ut_mapapi_SOURCES) $(zhex_SOURCES) \
	$(zisjson_SOURCES) $(zmapio_SOURCES) $(zs3parse_SOURCES)
DIST_SOURCES = $(am__bm_chunks3_SOURCES_DIST) \
	$(am__ncdumpchunks_SOURCES_DIST) $(am__s3util_SOURCES_DIST) \
	$(am__test_chunkcases_SOURCES_DIST) test_chunking.c \
	test_endians.c $(test_fillonlyz_SOURCES) test_filter_avail.c \
	test_filter_vlen.c test_nczfilter.c test_notzarr.c \
	$(am__test_put_vars_two_unlim_dim_SOURCES_DIST) \
	test_quantize.c test_readcaching.c \
	$(am__test_unlim_io_SOURCES_DIST) test_unlim_vars.c \
	test_writecaching.c test_zchunks.c test_zchunks2.c \
	test_zchunks3.c testfilter.c testfilter_misc.c \
	testfilter_multi.c testfilter_order.c testfilter_repeat.c \
	$(am__tst_pure_awssdk_SOURCES_DIST) $(ut_json_SOURCES) \
	$(ut_map_SOURCES) $(ut_mapapi_SOURCES) $(zhex_SOURCES) \
	$(zisjson_SOURCES) $(zmapio_SOURCES) $(zs3parse_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__extra_recursive_targets = check-valgrind-recursive \
	check-valgrind-memcheck-recursive \
	check-valgrind-helgrind-recursive check-valgrind-drd-recursive \
	check-valgrind-sgcheck-recursive
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
AM_TESTSUITE_SUMMARY_HEADER = ' for $(PACKAGE_STRING)'
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
@USE_HDF5_TRUE@am__EXEEXT_10 = test_put_vars_two_unlim_dim$(EXEEXT)
@NETCDF_BUILD_UTILITIES_TRUE@am__EXEEXT_11 = run_mud.sh \
@NETCDF_BUILD_UTILITIES_TRUE@	test_unlim_vars$(EXEEXT)
TEST_SUITE_LOG = test-suite.log
LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
LOG_COMPILE = $(LOG_COMPILER) $(AM_LOG_FLAGS) $(LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:@EXEEXT@.log=.log)
TEST_LOGS = $(am__test_logs2:.sh.log=.log)
SH_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver
SH_LOG_COMPILE = $(SH_LOG_COMPILER) $(AM_SH_LOG_FLAGS) $(SH_LOG_FLAGS)
am__DIST_COMMON = $(srcdir)/Makefile.in $(top_srcdir)/depcomp \
	$(top_srcdir)/lib_flags.am \
	$(top_srcdir)/nc_test4/test_filter.c \
	$(top_srcdir)/nc_test4/test_filter_misc.c \
	$(top_srcdir)/nc_test4/test_filter_order.c \
	$(top_srcdir)/nc_test4/test_filter_repeat.c \
	$(top_srcdir)/nc_test4/tst_multifilter.c \
	$(top_srcdir)/test-driver \
	$(top_srcdir)/unit_test/timer_utils.c \
	$(top_srcdir)/unit_test/timer_utils.h
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ALLOCA = @ALLOCA@
AMTAR = @AMTAR@

# Put together AM_CPPFLAGS and AM_LDFLAGS.
AM_CFLAGS = @AM_CFLAGS@ -I..
#SH_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver-verbose
#sh_LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver-verbose
#LOG_DRIVER = $(SHELL) $(top_srcdir)/test-driver-verbose
#TESTS_ENVIRONMENT += export SETX=1;
#TESTS_ENVIRONMENT += export NCTRACING=1;
AM_CPPFLAGS = -I$(top_builddir)/include -I$(top_srcdir)/include \
	-I$(top_builddir) -I$(top_srcdir) $(am__append_1) \
	$(am__append_2) -I${top_srcdir}/libnczarr \
	-I${top_srcdir}/plugins -I${top_srcdir} \
	-I${top_srcdir}/libnczarr $(am__append_31)
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AM_LDFLAGS = $(am__append_3) $(am__append_4) \
	${top_builddir}/liblib/libnetcdf.la
AR = @AR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BINFILE_NAME = @BINFILE_NAME@
BUILD_INTERNAL_DOCS = @BUILD_INTERNAL_DOCS@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CC_VERSION = @CC_VERSION@
CFLAGS = @CFLAGS@
CONFIG_DATE = @CONFIG_DATE@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CSCOPE = @CSCOPE@
CTAGS = @CTAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DOT = @DOT@
DOXYGEN = @DOXYGEN@
DOXYGEN_CSS_FILE = @DOXYGEN_CSS_FILE@
DOXYGEN_HEADER_FILE = @DOXYGEN_HEADER_FILE@
DOXYGEN_SEARCHENGINE = @DOXYGEN_SEARCHENGINE@
DOXYGEN_SERVER_BASED_SEARCH = @DOXYGEN_SERVER_BASED_SEARCH@
DO_FILTER_TESTS = @DO_FILTER_TESTS@
DO_LARGE_TESTS = @DO_LARGE_TESTS@
DO_REMOTE_FUNCTIONALITY = @DO_REMOTE_FUNCTIONALITY@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLED_DOC_SECTIONS = @ENABLED_DOC_SECTIONS@
ENABLE_VALGRIND_drd = @ENABLE_VALGRIND_drd@
ENABLE_VALGRIND_helgrind = @ENABLE_VALGRIND_helgrind@
ENABLE_VALGRIND_memcheck = @ENABLE_VALGRIND_memcheck@
ENABLE_VALGRIND_sgcheck = @ENABLE_VALGRIND_sgcheck@
ETAGS = @ETAGS@
EXEEXT = @EXEEXT@
FGREP = @FGREP@
FILECMD = @FILECMD@
GREP = @GREP@
HAS_BENCHMARKS = @HAS_BENCHMARKS@
HAS_BYTERANGE = @HAS_BYTERANGE@
HAS_CDF5 = @HAS_CDF5@
HAS_DAP = @HAS_DAP@
HAS_DAP2 = @HAS_DAP2@
HAS_DAP4 = @HAS_DAP4@
HAS_DEFLATE = @HAS_DEFLATE@
HAS_DISKLESS = @HAS_DISKLESS@
HAS_ERANGE_FILL = @HAS_ERANGE_FILL@
HAS_HDF4 = @HAS_HDF4@
HAS_HDF5 = @HAS_HDF5@
HAS_HDF5_ROS3 = @HAS_HDF5_ROS3@
HAS_LEGACY_MACROS = @HAS_LEGACY_MACROS@
HAS_LOGGING = @HAS_LOGGING@
HAS_MMAP = @HAS_MMAP@
HAS_NC2 = @HAS_NC2@
HAS_NCZARR = @HAS_NCZARR@
HAS_NCZARR_ZIP = @HAS_NCZARR_ZIP@
HAS_PARALLEL = @HAS_PARALLEL@
HAS_PARALLEL4 = @HAS_PARALLEL4@
HAS_PAR_FILTERS = @HAS_PAR_FILTERS@
HAS_PLUGINS = @HAS_PLUGINS@
HAS_PNETCDF = @HAS_PNETCDF@
HAS_QUANTIZE = @HAS_QUANTIZE@
HAS_S3 = @HAS_S3@
HAS_S3_AWS = @HAS_S3_AWS@
HAS_S3_INTERNAL = @HAS_S3_INTERNAL@
HAS_SZLIB = @HAS_SZLIB@
HAS_SZLIB_WRITE = @HAS_SZLIB_WRITE@
HAS_ZSTD = @HAS_ZSTD@
HAVE_DOT = @HAVE_DOT@
HAVE_GETFATTR = @HAVE_GETFATTR@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
ISCMAKE = @ISCMAKE@
ISCYGWIN = @ISCYGWIN@
ISMINGW = @ISMINGW@
ISMSVC = @ISMSVC@
ISMSYS = @ISMSYS@
ISOSX = @ISOSX@
ISREGEDIT = @ISREGEDIT@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
M4FLAGS = @M4FLAGS@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MKDIR_P = @MKDIR_P@
MPIEXEC = @MPIEXEC@
NC_DISPATCH_VERSION = @NC_DISPATCH_VERSION@
NC_HAS_BENCHMARKS = @NC_HAS_BENCHMARKS@
NC_HAS_BLOSC = @NC_HAS_BLOSC@
NC_HAS_BYTERANGE = @NC_HAS_BYTERANGE@
NC_HAS_BZ2 = @NC_HAS_BZ2@
NC_HAS_CDF5 = @NC_HAS_CDF5@
NC_HAS_DAP2 = @NC_HAS_DAP2@
NC_HAS_DAP4 = @NC_HAS_DAP4@
NC_HAS_DISKLESS = @NC_HAS_DISKLESS@
NC_HAS_ERANGE_FILL = @NC_HAS_ERANGE_FILL@
NC_HAS_HDF4 = @NC_HAS_HDF4@
NC_HAS_HDF5 = @NC_HAS_HDF5@
NC_HAS_HDF5_ROS3 = @NC_HAS_HDF5_ROS3@
NC_HAS_LOGGING = @NC_HAS_LOGGING@
NC_HAS_MMAP = @NC_HAS_MMAP@
NC_HAS_NC2 = @NC_HAS_NC2@
NC_HAS_NCZARR = @NC_HAS_NCZARR@
NC_HAS_PARALLEL = @NC_HAS_PARALLEL@
NC_HAS_PARALLEL4 = @NC_HAS_PARALLEL4@
NC_HAS_PAR_FILTERS = @NC_HAS_PAR_FILTERS@
NC_HAS_PNETCDF = @NC_HAS_PNETCDF@
NC_HAS_QUANTIZE = @NC_HAS_QUANTIZE@
NC_HAS_S3 = @NC_HAS_S3@
NC_HAS_S3_AWS = @NC_HAS_S3_AWS@
NC_HAS_S3_INTERNAL = @NC_HAS_S3_INTERNAL@
NC_HAS_SZIP = @NC_HAS_SZIP@
NC_HAS_ZSTD = @NC_HAS_ZSTD@
NC_LIBS = @NC_LIBS@
NC_M4 = @NC_M4@
NC_NETCDF_ENABLE_DOXYGEN_PDF_OUTPUT = @NC_NETCDF_ENABLE_DOXYGEN_PDF_OUTPUT@
NC_VERSION = @NC_VERSION@
NC_VERSION_NOTE = @NC_VERSION_NOTE@
NC_XML2_CONFIG = @NC_XML2_CONFIG@
NETCDF_ENABLE_NCZARR = @NETCDF_ENABLE_NCZARR@
NETCDF_ENABLE_S3_TESTING = @NETCDF_ENABLE_S3_TESTING@
NETCDF_PLUGIN_INSTALL_DIR = @NETCDF_PLUGIN_INSTALL_DIR@
NETCDF_PLUGIN_SEARCH_PATH = @NETCDF_PLUGIN_SEARCH_PATH@
NM = @NM@
NMEDIT = @NMEDIT@
NOUNDEFINED = @NOUNDEFINED@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PLATFORMUID = @PLATFORMUID@
RANLIB = @RANLIB@
RELAX_COORD_BOUND = @RELAX_COORD_BOUND@
S3TESTBUCKET = @S3TESTBUCKET@
S3TESTSUBTREE = @S3TESTSUBTREE@
SED = @SED@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SHOW_DOXYGEN_TAG_LIST = @SHOW_DOXYGEN_TAG_LIST@
STD_FILTERS = @STD_FILTERS@
STRIP = @STRIP@
TESTUID = @TESTUID@
USEPLUGINS = @USEPLUGINS@
VALGRIND = @VALGRIND@
VALGRIND_ENABLED = @VALGRIND_ENABLED@
VERSION = @VERSION@
WHICH_S3_SDK = @WHICH_S3_SDK@
WINVERBUILD = @WINVERBUILD@
WINVERMAJOR = @WINVERMAJOR@
XML2FLAGS = @XML2FLAGS@
XMLPARSER = @XMLPARSER@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
enable_shared = @enable_shared@
enable_static = @enable_static@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
netCDF_SO_VERSION = @netCDF_SO_VERSION@
netCDF_VERSION_MAJOR = @netCDF_VERSION_MAJOR@
netCDF_VERSION_MINOR = @netCDF_VERSION_MINOR@
netCDF_VERSION_PATCH = @netCDF_VERSION_PATCH@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
runstatedir = @runstatedir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
valgrind_enabled_tools = @valgrind_enabled_tools@
valgrind_tools = @valgrind_tools@
AM_TESTS_ENVIRONMENT = export TOPSRCDIR=${abs_top_srcdir}; export TOPBUILDDIR=${abs_top_builddir};
LDADD = ${top_builddir}/liblib/libnetcdf.la \
	${top_builddir}/liblib/libnetcdf.la
TESTS_ENVIRONMENT = 
TEST_EXTENSIONS = .sh
AM_CXXFLAGS = $(am__append_30)
testcommonsrc = test_utils.c test_utils.h
commonsrc = ut_util.c ut_test.c ut_includes.h ut_test.h ut_util.h test_nczarr_utils.h
ut_map_SOURCES = ut_map.c ${commonsrc}
ut_mapapi_SOURCES = ut_mapapi.c ${commonsrc}
ut_json_SOURCES = ut_json.c ${commonsrc}
test_fillonlyz_SOURCES = test_fillonlyz.c ${testcommonsrc}

# Unlimited Dimension tests
@USE_HDF5_TRUE@test_put_vars_two_unlim_dim_SOURCES = test_put_vars_two_unlim_dim.c ${testcommonsrc}
@USE_HDF5_TRUE@test_unlim_io_SOURCES = test_unlim_io.c ${testcommonsrc}
@LARGE_FILE_TESTS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@test_chunkcases_SOURCES = test_chunkcases.c ${testcommonsrc}
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@UTILSRC = bm_utils.c timer_utils.c test_utils.c bm_utils.h bm_timer.h
@BUILD_BENCHMARKS_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@bm_chunks3_SOURCES = bm_chunks3.c ${UTILSRC}
@ISMINGW_TRUE@@NETCDF_BUILD_UTILITIES_TRUE@@NETCDF_ENABLE_FILTER_TESTING_TRUE@@NETCDF_ENABLE_NCZARR_FILTERS_TRUE@XFAIL_TESTS = run_filter.sh run_specific_filters.sh run_nczfilter.sh
zhex_SOURCES = zhex.c
zisjson_SOURCES = zisjson.c
zmapio_SOURCES = zmapio.c
zs3parse_SOURCES = zs3parse.c
@NETCDF_ENABLE_S3_TRUE@s3util_SOURCES = s3util.c
@NETCDF_ENABLE_S3_AWS_TRUE@@NETCDF_ENABLE_S3_TESTALL_TRUE@@NETCDF_ENABLE_S3_TRUE@tst_pure_awssdk_SOURCES = tst_pure_awssdk.cpp
@ENABLE_NCDUMPCHUNKS_TRUE@ncdumpchunks_SOURCES = ncdumpchunks.c

# Interoperability files from external sources
EXTRA_DIST = CMakeLists.txt run_ut_map.sh run_ut_mapapi.sh \
	run_ut_misc.sh run_ncgen4.sh run_nccopyz.sh run_fillonlyz.sh \
	run_chunkcases.sh test_nczarr.sh run_perf_chunks1.sh \
	run_purezarr.sh run_interop.sh run_misc.sh run_filter.sh \
	run_newformat.sh run_nczarr_fill.sh run_quantize.sh \
	run_jsonconvention.sh run_nczfilter.sh run_unknown.sh \
	run_scalar.sh run_strings.sh run_nulls.sh run_notzarr.sh \
	run_external.sh run_unlim_io.sh run_corrupt.sh run_oldkeys.sh \
	ref_ut_map_create.cdl ref_ut_map_writedata.cdl \
	ref_ut_map_writemeta2.cdl ref_ut_map_writemeta.cdl \
	ref_ut_map_readmeta.txt ref_ut_map_readmeta2.txt \
	ref_ut_map_search.txt ref_ut_mapapi_create.cdl \
	ref_ut_mapapi_data.cdl ref_ut_mapapi_meta.cdl \
	ref_ut_mapapi_search.txt ref_t_meta_dim1.cdl \
	ref_t_meta_var1.cdl ref_ut_json_build.txt \
	ref_ut_json_parse.txt ref_ut_proj.txt \
	ref_ut_testmap_create.cdl ref_perdimspecs.cdl ref_fillonly.cdl \
	ref_whole.cdl ref_whole.txt ref_skip.cdl ref_skip.txt \
	ref_skipw.cdl ref_rem.cdl ref_rem.dmp ref_ndims.cdl \
	ref_ndims.dmp ref_misc1.cdl ref_misc1.dmp ref_misc2.cdl \
	ref_zarr_test_data_meta.cdl ref_avail1.cdl ref_avail1.dmp \
	ref_avail1.txt ref_xarray.cdl ref_purezarr.cdl \
	ref_purezarr_base.cdl ref_nczarr2zarr.cdl ref_bzip2.cdl \
	ref_filtered.cdl ref_multi.cdl ref_any.cdl ref_oldformat.cdl \
	ref_oldformat.zip ref_newformatpure.cdl ref_groups.h5 \
	ref_byte.zarr.zip ref_byte_fill_value_null.zarr.zip \
	ref_groups_regular.cdl ref_byte.cdl \
	ref_byte_fill_value_null.cdl ref_jsonconvention.cdl \
	ref_jsonconvention.zmap ref_string.cdl \
	ref_string_nczarr.baseline ref_string_zarr.baseline \
	ref_scalar.cdl ref_scalar_nczarr.cdl ref_nulls_nczarr.baseline \
	ref_nulls_zarr.baseline ref_nulls.cdl ref_notzarr.tar.gz \
	ref_oldkeys.cdl ref_oldkeys.file.zip ref_oldkeys.zmap \
	ref_noshape.file.zip ref_power_901_constants_orig.zip \
	ref_power_901_constants.cdl ref_quotes_orig.zip ref_quotes.cdl \
	ref_zarr_test_data.cdl.gz ref_zarr_test_data_2d.cdl.gz
CLEANFILES = ut_*.txt ut*.cdl tmp*.nc tmp*.cdl tmp*.txt tmp*.dmp tmp*.zip tmp*.nc tmp*.dump tmp*.tmp tmp*.zmap tmp_ngc.c ref_zarr_test_data.cdl tst_*.nc.zip ref_quotes.zip ref_power_901_constants.zip
BUILT_SOURCES = test_quantize.c test_filter_vlen.c test_unlim_vars.c test_endians.c \
                test_put_vars_two_unlim_dim.c test_chunking.c \
                run_unknown.sh run_specific_filters.sh run_filter_vlen.sh run_filterinstall.sh \
		run_mud.sh run_nccopy5.sh run_filter_misc.sh

DISTCLEANFILES = findplugin.sh ${BUILT_SOURCES}
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .log .o .obj .sh .sh$(EXEEXT) .trs
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/lib_flags.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign nczarr_test/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign nczarr_test/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__maybe_remake_depfiles);; \
	esac;
$(top_srcdir)/lib_flags.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
timer_utils.h: $(top_builddir)/config.status $(top_srcdir)/unit_test/timer_utils.h
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
timer_utils.c: $(top_builddir)/config.status $(top_srcdir)/unit_test/timer_utils.c
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
test_filter.c: $(top_builddir)/config.status $(top_srcdir)/nc_test4/test_filter.c
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
test_filter_misc.c: $(top_builddir)/config.status $(top_srcdir)/nc_test4/test_filter_misc.c
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
tst_multifilter.c: $(top_builddir)/config.status $(top_srcdir)/nc_test4/tst_multifilter.c
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
test_filter_repeat.c: $(top_builddir)/config.status $(top_srcdir)/nc_test4/test_filter_repeat.c
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
test_filter_order.c: $(top_builddir)/config.status $(top_srcdir)/nc_test4/test_filter_order.c
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

bm_chunks3$(EXEEXT): $(bm_chunks3_OBJECTS) $(bm_chunks3_DEPENDENCIES) $(EXTRA_bm_chunks3_DEPENDENCIES) 
	@rm -f bm_chunks3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(bm_chunks3_OBJECTS) $(bm_chunks3_LDADD) $(LIBS)

ncdumpchunks$(EXEEXT): $(ncdumpchunks_OBJECTS) $(ncdumpchunks_DEPENDENCIES) $(EXTRA_ncdumpchunks_DEPENDENCIES) 
	@rm -f ncdumpchunks$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ncdumpchunks_OBJECTS) $(ncdumpchunks_LDADD) $(LIBS)

s3util$(EXEEXT): $(s3util_OBJECTS) $(s3util_DEPENDENCIES) $(EXTRA_s3util_DEPENDENCIES) 
	@rm -f s3util$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(s3util_OBJECTS) $(s3util_LDADD) $(LIBS)

test_chunkcases$(EXEEXT): $(test_chunkcases_OBJECTS) $(test_chunkcases_DEPENDENCIES) $(EXTRA_test_chunkcases_DEPENDENCIES) 
	@rm -f test_chunkcases$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_chunkcases_OBJECTS) $(test_chunkcases_LDADD) $(LIBS)

test_chunking$(EXEEXT): $(test_chunking_OBJECTS) $(test_chunking_DEPENDENCIES) $(EXTRA_test_chunking_DEPENDENCIES) 
	@rm -f test_chunking$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_chunking_OBJECTS) $(test_chunking_LDADD) $(LIBS)

test_endians$(EXEEXT): $(test_endians_OBJECTS) $(test_endians_DEPENDENCIES) $(EXTRA_test_endians_DEPENDENCIES) 
	@rm -f test_endians$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_endians_OBJECTS) $(test_endians_LDADD) $(LIBS)

test_fillonlyz$(EXEEXT): $(test_fillonlyz_OBJECTS) $(test_fillonlyz_DEPENDENCIES) $(EXTRA_test_fillonlyz_DEPENDENCIES) 
	@rm -f test_fillonlyz$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_fillonlyz_OBJECTS) $(test_fillonlyz_LDADD) $(LIBS)

test_filter_avail$(EXEEXT): $(test_filter_avail_OBJECTS) $(test_filter_avail_DEPENDENCIES) $(EXTRA_test_filter_avail_DEPENDENCIES) 
	@rm -f test_filter_avail$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_filter_avail_OBJECTS) $(test_filter_avail_LDADD) $(LIBS)

test_filter_vlen$(EXEEXT): $(test_filter_vlen_OBJECTS) $(test_filter_vlen_DEPENDENCIES) $(EXTRA_test_filter_vlen_DEPENDENCIES) 
	@rm -f test_filter_vlen$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_filter_vlen_OBJECTS) $(test_filter_vlen_LDADD) $(LIBS)

test_nczfilter$(EXEEXT): $(test_nczfilter_OBJECTS) $(test_nczfilter_DEPENDENCIES) $(EXTRA_test_nczfilter_DEPENDENCIES) 
	@rm -f test_nczfilter$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_nczfilter_OBJECTS) $(test_nczfilter_LDADD) $(LIBS)

test_notzarr$(EXEEXT): $(test_notzarr_OBJECTS) $(test_notzarr_DEPENDENCIES) $(EXTRA_test_notzarr_DEPENDENCIES) 
	@rm -f test_notzarr$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_notzarr_OBJECTS) $(test_notzarr_LDADD) $(LIBS)

test_put_vars_two_unlim_dim$(EXEEXT): $(test_put_vars_two_unlim_dim_OBJECTS) $(test_put_vars_two_unlim_dim_DEPENDENCIES) $(EXTRA_test_put_vars_two_unlim_dim_DEPENDENCIES) 
	@rm -f test_put_vars_two_unlim_dim$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_put_vars_two_unlim_dim_OBJECTS) $(test_put_vars_two_unlim_dim_LDADD) $(LIBS)

test_quantize$(EXEEXT): $(test_quantize_OBJECTS) $(test_quantize_DEPENDENCIES) $(EXTRA_test_quantize_DEPENDENCIES) 
	@rm -f test_quantize$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_quantize_OBJECTS) $(test_quantize_LDADD) $(LIBS)

test_readcaching$(EXEEXT): $(test_readcaching_OBJECTS) $(test_readcaching_DEPENDENCIES) $(EXTRA_test_readcaching_DEPENDENCIES) 
	@rm -f test_readcaching$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_readcaching_OBJECTS) $(test_readcaching_LDADD) $(LIBS)

test_unlim_io$(EXEEXT): $(test_unlim_io_OBJECTS) $(test_unlim_io_DEPENDENCIES) $(EXTRA_test_unlim_io_DEPENDENCIES) 
	@rm -f test_unlim_io$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_unlim_io_OBJECTS) $(test_unlim_io_LDADD) $(LIBS)

test_unlim_vars$(EXEEXT): $(test_unlim_vars_OBJECTS) $(test_unlim_vars_DEPENDENCIES) $(EXTRA_test_unlim_vars_DEPENDENCIES) 
	@rm -f test_unlim_vars$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_unlim_vars_OBJECTS) $(test_unlim_vars_LDADD) $(LIBS)

test_writecaching$(EXEEXT): $(test_writecaching_OBJECTS) $(test_writecaching_DEPENDENCIES) $(EXTRA_test_writecaching_DEPENDENCIES) 
	@rm -f test_writecaching$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_writecaching_OBJECTS) $(test_writecaching_LDADD) $(LIBS)

test_zchunks$(EXEEXT): $(test_zchunks_OBJECTS) $(test_zchunks_DEPENDENCIES) $(EXTRA_test_zchunks_DEPENDENCIES) 
	@rm -f test_zchunks$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_zchunks_OBJECTS) $(test_zchunks_LDADD) $(LIBS)

test_zchunks2$(EXEEXT): $(test_zchunks2_OBJECTS) $(test_zchunks2_DEPENDENCIES) $(EXTRA_test_zchunks2_DEPENDENCIES) 
	@rm -f test_zchunks2$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_zchunks2_OBJECTS) $(test_zchunks2_LDADD) $(LIBS)

test_zchunks3$(EXEEXT): $(test_zchunks3_OBJECTS) $(test_zchunks3_DEPENDENCIES) $(EXTRA_test_zchunks3_DEPENDENCIES) 
	@rm -f test_zchunks3$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_zchunks3_OBJECTS) $(test_zchunks3_LDADD) $(LIBS)

testfilter$(EXEEXT): $(testfilter_OBJECTS) $(testfilter_DEPENDENCIES) $(EXTRA_testfilter_DEPENDENCIES) 
	@rm -f testfilter$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(testfilter_OBJECTS) $(testfilter_LDADD) $(LIBS)

testfilter_misc$(EXEEXT): $(testfilter_misc_OBJECTS) $(testfilter_misc_DEPENDENCIES) $(EXTRA_testfilter_misc_DEPENDENCIES) 
	@rm -f testfilter_misc$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(testfilter_misc_OBJECTS) $(testfilter_misc_LDADD) $(LIBS)

testfilter_multi$(EXEEXT): $(testfilter_multi_OBJECTS) $(testfilter_multi_DEPENDENCIES) $(EXTRA_testfilter_multi_DEPENDENCIES) 
	@rm -f testfilter_multi$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(testfilter_multi_OBJECTS) $(testfilter_multi_LDADD) $(LIBS)

testfilter_order$(EXEEXT): $(testfilter_order_OBJECTS) $(testfilter_order_DEPENDENCIES) $(EXTRA_testfilter_order_DEPENDENCIES) 
	@rm -f testfilter_order$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(testfilter_order_OBJECTS) $(testfilter_order_LDADD) $(LIBS)

testfilter_repeat$(EXEEXT): $(testfilter_repeat_OBJECTS) $(testfilter_repeat_DEPENDENCIES) $(EXTRA_testfilter_repeat_DEPENDENCIES) 
	@rm -f testfilter_repeat$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(testfilter_repeat_OBJECTS) $(testfilter_repeat_LDADD) $(LIBS)

tst_pure_awssdk$(EXEEXT): $(tst_pure_awssdk_OBJECTS) $(tst_pure_awssdk_DEPENDENCIES) $(EXTRA_tst_pure_awssdk_DEPENDENCIES) 
	@rm -f tst_pure_awssdk$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(tst_pure_awssdk_OBJECTS) $(tst_pure_awssdk_LDADD) $(LIBS)

ut_json$(EXEEXT): $(ut_json_OBJECTS) $(ut_json_DEPENDENCIES) $(EXTRA_ut_json_DEPENDENCIES) 
	@rm -f ut_json$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ut_json_OBJECTS) $(ut_json_LDADD) $(LIBS)

ut_map$(EXEEXT): $(ut_map_OBJECTS) $(ut_map_DEPENDENCIES) $(EXTRA_ut_map_DEPENDENCIES) 
	@rm -f ut_map$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ut_map_OBJECTS) $(ut_map_LDADD) $(LIBS)

ut_mapapi$(EXEEXT): $(ut_mapapi_OBJECTS) $(ut_mapapi_DEPENDENCIES) $(EXTRA_ut_mapapi_DEPENDENCIES) 
	@rm -f ut_mapapi$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(ut_mapapi_OBJECTS) $(ut_mapapi_LDADD) $(LIBS)

zhex$(EXEEXT): $(zhex_OBJECTS) $(zhex_DEPENDENCIES) $(EXTRA_zhex_DEPENDENCIES) 
	@rm -f zhex$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(zhex_OBJECTS) $(zhex_LDADD) $(LIBS)

zisjson$(EXEEXT): $(zisjson_OBJECTS) $(zisjson_DEPENDENCIES) $(EXTRA_zisjson_DEPENDENCIES) 
	@rm -f zisjson$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(zisjson_OBJECTS) $(zisjson_LDADD) $(LIBS)

zmapio$(EXEEXT): $(zmapio_OBJECTS) $(zmapio_DEPENDENCIES) $(EXTRA_zmapio_DEPENDENCIES) 
	@rm -f zmapio$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(zmapio_OBJECTS) $(zmapio_LDADD) $(LIBS)

zs3parse$(EXEEXT): $(zs3parse_OBJECTS) $(zs3parse_DEPENDENCIES) $(EXTRA_zs3parse_DEPENDENCIES) 
	@rm -f zs3parse$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(zs3parse_OBJECTS) $(zs3parse_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bm_chunks3.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bm_utils.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ncdumpchunks.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/s3util.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_chunkcases.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_chunking.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_endians.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_fillonlyz.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_filter_avail.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_filter_vlen.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_nczfilter.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_notzarr.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_put_vars_two_unlim_dim.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_quantize.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_readcaching.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_unlim_io.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_unlim_vars.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_utils.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_writecaching.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_zchunks.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_zchunks2.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/test_zchunks3.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testfilter.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testfilter_misc.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testfilter_multi.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testfilter_order.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/testfilter_repeat.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/timer_utils.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tst_pure_awssdk.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ut_json.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ut_map.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ut_mapapi.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ut_test.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ut_util.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zhex.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zisjson.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zmapio.Po@am__quote@ # am--include-marker
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zs3parse.Po@am__quote@ # am--include-marker

$(am__depfiles_remade):
	@$(MKDIR_P) $(@D)
	@echo '# dummy' >$@-t && $(am__mv) $@-t $@

am--depfiles: $(am__depfiles_remade)

.c.o:
@am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(AM_V_CC)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCC_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<

.cpp.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
@am__fastdepCXX_TRUE@	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
@am__fastdepCXX_TRUE@	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
@am__fastdepCXX_TRUE@	$(am__mv) $$depbase.Tpo $$depbase.Plo
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
check-valgrind-local: 
check-valgrind-memcheck-local: 
check-valgrind-helgrind-local: 
check-valgrind-drd-local: 
check-valgrind-sgcheck-local: 

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary"$(AM_TESTSUITE_SUMMARY_HEADER)"$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS: $(check_PROGRAMS)
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
test_put_vars_two_unlim_dim.log: test_put_vars_two_unlim_dim$(EXEEXT)
	@p='test_put_vars_two_unlim_dim$(EXEEXT)'; \
	b='test_put_vars_two_unlim_dim'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
test_unlim_vars.log: test_unlim_vars$(EXEEXT)
	@p='test_unlim_vars$(EXEEXT)'; \
	b='test_unlim_vars'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
test_endians.log: test_endians$(EXEEXT)
	@p='test_endians$(EXEEXT)'; \
	b='test_endians'; \
	$(am__check_pre) $(LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_LOG_DRIVER_FLAGS) $(LOG_DRIVER_FLAGS) -- $(LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
.sh.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(SH_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_SH_LOG_DRIVER_FLAGS) $(SH_LOG_DRIVER_FLAGS) -- $(SH_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
@am__EXEEXT_TRUE@.sh$(EXEEXT).log:
@am__EXEEXT_TRUE@	@p='$<'; \
@am__EXEEXT_TRUE@	$(am__set_b); \
@am__EXEEXT_TRUE@	$(am__check_pre) $(SH_LOG_DRIVER) --test-name "$$f" \
@am__EXEEXT_TRUE@	--log-file $$b.log --trs-file $$b.trs \
@am__EXEEXT_TRUE@	$(am__common_driver_flags) $(AM_SH_LOG_DRIVER_FLAGS) $(SH_LOG_DRIVER_FLAGS) -- $(SH_LOG_COMPILE) \
@am__EXEEXT_TRUE@	"$$tst" $(AM_TESTS_FD_REDIRECT)
distdir: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) distdir-am

distdir-am: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
@NETCDF_ENABLE_S3_TESTALL_FALSE@check-local:
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS check-local
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(PROGRAMS)
installdirs:
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
check-valgrind: check-valgrind-am

check-valgrind-am: check-valgrind-local

check-valgrind-drd: check-valgrind-drd-am

check-valgrind-drd-am: check-valgrind-drd-local

check-valgrind-helgrind: check-valgrind-helgrind-am

check-valgrind-helgrind-am: check-valgrind-helgrind-local

check-valgrind-memcheck: check-valgrind-memcheck-am

check-valgrind-memcheck-am: check-valgrind-memcheck-local

check-valgrind-sgcheck: check-valgrind-sgcheck-am

check-valgrind-sgcheck-am: check-valgrind-sgcheck-local

clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
		-rm -f ./$(DEPDIR)/bm_chunks3.Po
	-rm -f ./$(DEPDIR)/bm_utils.Po
	-rm -f ./$(DEPDIR)/ncdumpchunks.Po
	-rm -f ./$(DEPDIR)/s3util.Po
	-rm -f ./$(DEPDIR)/test_chunkcases.Po
	-rm -f ./$(DEPDIR)/test_chunking.Po
	-rm -f ./$(DEPDIR)/test_endians.Po
	-rm -f ./$(DEPDIR)/test_fillonlyz.Po
	-rm -f ./$(DEPDIR)/test_filter_avail.Po
	-rm -f ./$(DEPDIR)/test_filter_vlen.Po
	-rm -f ./$(DEPDIR)/test_nczfilter.Po
	-rm -f ./$(DEPDIR)/test_notzarr.Po
	-rm -f ./$(DEPDIR)/test_put_vars_two_unlim_dim.Po
	-rm -f ./$(DEPDIR)/test_quantize.Po
	-rm -f ./$(DEPDIR)/test_readcaching.Po
	-rm -f ./$(DEPDIR)/test_unlim_io.Po
	-rm -f ./$(DEPDIR)/test_unlim_vars.Po
	-rm -f ./$(DEPDIR)/test_utils.Po
	-rm -f ./$(DEPDIR)/test_writecaching.Po
	-rm -f ./$(DEPDIR)/test_zchunks.Po
	-rm -f ./$(DEPDIR)/test_zchunks2.Po
	-rm -f ./$(DEPDIR)/test_zchunks3.Po
	-rm -f ./$(DEPDIR)/testfilter.Po
	-rm -f ./$(DEPDIR)/testfilter_misc.Po
	-rm -f ./$(DEPDIR)/testfilter_multi.Po
	-rm -f ./$(DEPDIR)/testfilter_order.Po
	-rm -f ./$(DEPDIR)/testfilter_repeat.Po
	-rm -f ./$(DEPDIR)/timer_utils.Po
	-rm -f ./$(DEPDIR)/tst_pure_awssdk.Po
	-rm -f ./$(DEPDIR)/ut_json.Po
	-rm -f ./$(DEPDIR)/ut_map.Po
	-rm -f ./$(DEPDIR)/ut_mapapi.Po
	-rm -f ./$(DEPDIR)/ut_test.Po
	-rm -f ./$(DEPDIR)/ut_util.Po
	-rm -f ./$(DEPDIR)/zhex.Po
	-rm -f ./$(DEPDIR)/zisjson.Po
	-rm -f ./$(DEPDIR)/zmapio.Po
	-rm -f ./$(DEPDIR)/zs3parse.Po
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
		-rm -f ./$(DEPDIR)/bm_chunks3.Po
	-rm -f ./$(DEPDIR)/bm_utils.Po
	-rm -f ./$(DEPDIR)/ncdumpchunks.Po
	-rm -f ./$(DEPDIR)/s3util.Po
	-rm -f ./$(DEPDIR)/test_chunkcases.Po
	-rm -f ./$(DEPDIR)/test_chunking.Po
	-rm -f ./$(DEPDIR)/test_endians.Po
	-rm -f ./$(DEPDIR)/test_fillonlyz.Po
	-rm -f ./$(DEPDIR)/test_filter_avail.Po
	-rm -f ./$(DEPDIR)/test_filter_vlen.Po
	-rm -f ./$(DEPDIR)/test_nczfilter.Po
	-rm -f ./$(DEPDIR)/test_notzarr.Po
	-rm -f ./$(DEPDIR)/test_put_vars_two_unlim_dim.Po
	-rm -f ./$(DEPDIR)/test_quantize.Po
	-rm -f ./$(DEPDIR)/test_readcaching.Po
	-rm -f ./$(DEPDIR)/test_unlim_io.Po
	-rm -f ./$(DEPDIR)/test_unlim_vars.Po
	-rm -f ./$(DEPDIR)/test_utils.Po
	-rm -f ./$(DEPDIR)/test_writecaching.Po
	-rm -f ./$(DEPDIR)/test_zchunks.Po
	-rm -f ./$(DEPDIR)/test_zchunks2.Po
	-rm -f ./$(DEPDIR)/test_zchunks3.Po
	-rm -f ./$(DEPDIR)/testfilter.Po
	-rm -f ./$(DEPDIR)/testfilter_misc.Po
	-rm -f ./$(DEPDIR)/testfilter_multi.Po
	-rm -f ./$(DEPDIR)/testfilter_order.Po
	-rm -f ./$(DEPDIR)/testfilter_repeat.Po
	-rm -f ./$(DEPDIR)/timer_utils.Po
	-rm -f ./$(DEPDIR)/tst_pure_awssdk.Po
	-rm -f ./$(DEPDIR)/ut_json.Po
	-rm -f ./$(DEPDIR)/ut_map.Po
	-rm -f ./$(DEPDIR)/ut_mapapi.Po
	-rm -f ./$(DEPDIR)/ut_test.Po
	-rm -f ./$(DEPDIR)/ut_util.Po
	-rm -f ./$(DEPDIR)/zhex.Po
	-rm -f ./$(DEPDIR)/zisjson.Po
	-rm -f ./$(DEPDIR)/zmapio.Po
	-rm -f ./$(DEPDIR)/zs3parse.Po
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: all check check-am install install-am install-exec \
	install-strip

.PHONY: CTAGS GTAGS TAGS all all-am am--depfiles check check-TESTS \
	check-am check-local check-valgrind-am check-valgrind-drd-am \
	check-valgrind-drd-local check-valgrind-helgrind-am \
	check-valgrind-helgrind-local check-valgrind-local \
	check-valgrind-memcheck-am check-valgrind-memcheck-local \
	check-valgrind-sgcheck-am check-valgrind-sgcheck-local clean \
	clean-checkPROGRAMS clean-generic clean-libtool clean-local \
	clean-noinstPROGRAMS cscopelist-am ctags ctags-am distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am recheck tags tags-am uninstall \
	uninstall-am

.PRECIOUS: Makefile


test_quantize.c: $(top_srcdir)/nc_test4/tst_quantize.c
	rm -f $@
	echo "#define TESTNCZARR" > $@
	cat $(top_srcdir)/nc_test4/tst_quantize.c >> $@

test_filter_vlen.c: $(top_srcdir)/nc_test4/tst_filter_vlen.c
	rm -f $@
	echo "#define TESTNCZARR" > $@
	cat $(top_srcdir)/nc_test4/tst_filter_vlen.c >> $@

test_unlim_vars.c: $(top_srcdir)/nc_test4/tst_unlim_vars.c
	rm -f $@
	echo "#define TESTNCZARR" > $@
	cat $(top_srcdir)/nc_test4/tst_unlim_vars.c >> $@

test_endians.c: $(top_srcdir)/nc_test4/tst_h5_endians.c
	rm -f $@
	echo "#define TESTNCZARR" > $@
	cat $(top_srcdir)/nc_test4/tst_h5_endians.c >> $@

test_put_vars_two_unlim_dim.c: $(top_srcdir)/nc_test4/tst_put_vars_two_unlim_dim.c
	rm -f $@
	echo "#define TESTNCZARR" > $@
	cat $(top_srcdir)/nc_test4/tst_put_vars_two_unlim_dim.c >> $@

test_chunking.c: $(top_srcdir)/ncdump/tst_chunking.c
	rm -f $@
	echo "#define TESTNCZARR" > $@
	cat $(top_srcdir)/ncdump/tst_chunking.c >> $@

run_unknown.sh: $(top_srcdir)/nc_test4/tst_unknown.sh
	rm -f $@ run_unknown.tmp
	echo "#!/bin/bash" > run_unknown.tmp
	echo "TESTNCZARR=1" >> run_unknown.tmp
	cat $(top_srcdir)/nc_test4/tst_unknown.sh >> run_unknown.tmp
	tr -d '\r' < run_unknown.tmp > $@
	chmod a+x $@
	rm -f run_unknown.tmp

run_specific_filters.sh: $(top_srcdir)/nc_test4/tst_specific_filters.sh
	rm -f $@ run_specific_filters.tmp
	echo "#!/bin/bash" > run_specific_filters.tmp
	echo "TESTNCZARR=1" >> run_specific_filters.tmp
	cat $(top_srcdir)/nc_test4/tst_specific_filters.sh >> run_specific_filters.tmp
	tr -d '\r' < run_specific_filters.tmp > $@
	chmod a+x $@
	rm -f run_specific_filters.tmp

run_filter_vlen.sh: $(top_srcdir)/nc_test4/tst_filter_vlen.sh
	rm -f $@ run_filter_vlen.tmp
	echo "#!/bin/bash" > run_filter_vlen.tmp
	echo "TESTNCZARR=1" >> run_filter_vlen.tmp
	cat $(top_srcdir)/nc_test4/tst_filter_vlen.sh >> run_filter_vlen.tmp
	tr -d '\r' < run_filter_vlen.tmp > $@
	chmod a+x $@
	rm -f run_filter_vlen.tmp

run_filter_misc.sh: $(top_srcdir)/nc_test4/tst_filter_misc.sh
	rm -f $@ run_filter_misc.tmp
	echo "#!/bin/bash" > run_filter_misc.tmp
	echo "TESTNCZARR=1" >> run_filter_misc.tmp
	cat $(top_srcdir)/nc_test4/tst_filter_misc.sh >> run_filter_misc.tmp
	tr -d '\r' < run_filter_misc.tmp > $@
	chmod a+x $@
	rm -f run_filter_misc.tmp

run_filterinstall.sh: $(top_srcdir)/nc_test4/tst_filterinstall.sh
	rm -f $@ run_filterinstall.tmp
	echo "#!/bin/bash" > run_filterinstall.tmp
	echo "TESTNCZARR=1" >> run_filterinstall.tmp
	cat $(top_srcdir)/nc_test4/tst_filterinstall.sh >> run_filterinstall.tmp
	tr -d '\r' < run_filterinstall.tmp > $@
	chmod a+x $@
	rm -f run_filterinstall.tmp

run_mud.sh: $(top_srcdir)/ncdump/tst_mud.sh
	rm -f $@ run_mud.tmp
	echo "#!/bin/bash" > run_mud.tmp
	echo "TESTNCZARR=1" >> run_mud.tmp
	cat $(top_srcdir)/ncdump/tst_mud.sh >> run_mud.tmp
	tr -d '\r' < run_mud.tmp > $@
	chmod a+x $@
	rm -f run_mud.tmp

run_nccopy5.sh: $(top_srcdir)/ncdump/tst_nccopy5.sh
	rm -f $@ run_nccopy5.tmp
	echo "#!/bin/bash" > run_nccopy5.tmp
	echo "TESTNCZARR=1" >> run_nccopy5.tmp
	cat $(top_srcdir)/ncdump/tst_nccopy5.sh >> run_nccopy5.tmp
	tr -d '\r' < run_nccopy5.tmp > $@
	chmod a+x $@
	rm -f run_nccopy5.tmp

# Remove directories
clean-local:
	rm -fr testdir_* testset_*
	rm -fr tmp_*.nc tmp_*.zarr tst_quantize*.zarr tmp*.file results.file results.s3 results.zip
	rm -fr rcmiscdir ref_power_901_constants.file 

@NETCDF_ENABLE_S3_TESTALL_TRUE@check-local:
@NETCDF_ENABLE_S3_TESTALL_TRUE@	bash ${abs_top_builddir}/s3cleanup.sh

# If valgrind is present, add valgrind targets.
@VALGRIND_CHECK_RULES@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
