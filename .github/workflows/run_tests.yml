###
# Build hdf4, hdf5 dependencies and cache them in a combined directory.
###

name: Run netCDF Tests

on: [pull_request]

jobs:

  build-deps:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        hdf5: [ 1.8.21, 1.10.7 ]

    steps:

      - uses: actions/checkout@v2

      - name: Install System dependencies
        shell: bash -l {0}
        run: sudo apt update && sudo apt install -y libaec-dev zlib1g-dev automake autoconf libcurl4-openssl-dev libjpeg-dev wget curl bzip2 m4 flex bison cmake

        ###
        # Installing libhdf4 and libhdf5
        ###
      - name: Cache libhdf5-${{ matrix.hdf5 }}
        id: cache-hdf5
        uses: actions/cache@v2
        with:
          path: ~/environments/${{ matrix.hdf5 }}
          key: hdf5-${{ runner.os }}-${{ matrix.hdf5 }}


      - name: Build libhdf5-${{ matrix.hdf5 }}
        if: steps.cache-hdf5.outputs.cache-hit != 'true'
        run: |
          set -x
          wget https://support.hdfgroup.org/ftp/HDF/releases/HDF4.2.15/src/hdf-4.2.15.tar.bz2
          tar -jxf hdf-4.2.15.tar.bz2
          pushd hdf-4.2.15
          ./configure --prefix=${HOME}/environments/${{ matrix.hdf5 }} --disable-static --enable-shared --disable-fortran --disable-netcdf --with-szlib
          make -j
          make install -j
          popd
          wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-$(echo ${{ matrix.hdf5 }} | cut -d. -f 1,2)/hdf5-${{ matrix.hdf5 }}/src/hdf5-${{ matrix.hdf5 }}.tar.bz2
          tar -jxf hdf5-${{ matrix.hdf5 }}.tar.bz2
          pushd hdf5-${{ matrix.hdf5 }}
          ./configure --disable-static --enable-shared --prefix=${HOME}/environments/${{ matrix.hdf5 }} --enable-hl --with-szlib
          make -j
          make install -j
          popd


  nc-autotools:

    needs: build-deps
    runs-on: ubuntu-latest

    strategy:
      matrix:
        hdf5: [ 1.8.21, 1.10.7 ]
        use_nc4: [ nc3, nc4 ]
        use_dap: [ dap_off, dap_on ]
    steps:

      - uses: actions/checkout@v2

      - name: Install System dependencies
        shell: bash -l {0}
        run: sudo apt update && sudo apt install -y libaec-dev zlib1g-dev automake autoconf libcurl4-openssl-dev libjpeg-dev wget curl bzip2 m4 flex bison cmake

###
# Set Environmental Variables
###

      - run: echo "CFLAGS=-I${HOME}/environments/${{ matrix.hdf5 }}/include" >> $GITHUB_ENV
      - run: echo "LDFLAGS=-L${HOME}/environments/${{ matrix.hdf5 }}/lib" >> $GITHUB_ENV
      - run: echo "LD_LIBRARY_PATH=${HOME}/environments/${{ matrix.hdf5 }}/lib" >> $GITHUB_ENV
      - run: |
          echo "ENABLE_HDF4=--disable-hdf4" >> $GITHUB_ENV
          echo "ENABLE_NC4=--disable-netcdf-4" >> $GITHUB_ENV
        if: matrix.use_nc4 == 'nc3'
      - run: |
          echo "ENABLE_HDF4=--enable-hdf4" >> $GITHUB_ENV
          echo "ENABLE_NC4=--enable-netcdf-4" >> $GITHUB_ENV
        if: matrix.use_nc4 == 'nc4'
      - run: echo "ENABLE_DAP=--disable-dap" >> $GITHUB_ENV
        if: matrix.use_dap == 'dap_off'
      - run: echo "ENABLE_DAP=--enable-dap" >> $GITHUB_ENV
        if: matrix.use_dap == 'dap_on'

###
# Fetch Cache
###

      - name: Fetch HDF Cache
        id: cache-hdf
        uses: actions/cache@v2
        with:
          path: ~/environments/${{ matrix.hdf5 }}
          key: hdf5-${{ runner.os }}-${{ matrix.hdf5 }}

      - name: Check Cache
        shell: bash -l {0}
        run: ls ${HOME}/environments && ls ${HOME}/environments/${{ matrix.hdf5 }} && ls ${HOME}/environments/${{ matrix.hdf5}}/lib

###
# Configure and build
###

      - name: Run autoconf
        shell: bash -l {0}
        run: autoreconf -if

      - name: Configure
        shell: bash -l {0}
        run: CFLAGS=${CFLAGS} LDFLAGS=${LDFLAGS} LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ./configure ${ENABLE_HDF4} ${ENABLE_NC4} ${ENABLE_DAP}

      - name: Look at config.log if error
        shell: bash -l {0}
        run: cat config.log
        if: ${{ failure() }}

      - name: Print Summary
        shell: bash -l {0}
        run: cat libnetcdf.settings

      - name: Build Library and Utilities
        shell: bash -l {0}
        run: CFLAGS=${CFLAGS} LDFLAGS=${LDFLAGS} LD_LIBRARY_PATH=${LD_LIBRARY_PATH} make -j
        if: ${{ success() }}

      - name: Build Tests
        shell: bash -l {0}
        run: CFLAGS=${CFLAGS} LDFLAGS=${LDFLAGS} LD_LIBRARY_PATH=${LD_LIBRARY_PATH} make check TESTS="" -j
        if: ${{ success() }}

      - name: Run Tests
        shell: bash -l {0}
        run: CFLAGS=${CFLAGS} LDFLAGS=${LDFLAGS} LD_LIBRARY_PATH=${LD_LIBRARY_PATH} make check -j
        if: ${{ success() }}

      #- name: Make Distcheck
      #  shell: bash -l {0}
      #  run: CFLAGS=${CFLAGS} LDFLAGS=${LDFLAGS} LD_LIBRARY_PATH=${LD_LIBRARY_PATH} make distcheck -j

  nc-cmake:

    needs: build-deps
    runs-on: ubuntu-latest

    strategy:
      matrix:
        hdf5: [ 1.8.21, 1.10.7 ]
        use_nc4: [ nc3, nc4 ]
        use_dap: [ dap_off, dap_on ]
    steps:

      - uses: actions/checkout@v2

      - name: Install System dependencies
        shell: bash -l {0}
        run: sudo apt update && sudo apt install -y libaec-dev zlib1g-dev automake autoconf libcurl4-openssl-dev libjpeg-dev wget curl bzip2 m4 flex bison cmake

###
# Set Environmental Variables
###

      - run: echo "CMAKE_PREFIX_PATH=${HOME}/environments/${{ matrix.hdf5 }}/" >> $GITHUB_ENV
      - run: echo "LD_LIBRARY_PATH=${HOME}/environments/${{ matrix.hdf5 }}/lib" >> $GITHUB_ENV
      - run: |
          echo "ENABLE_HDF4=OFF" >> $GITHUB_ENV
          echo "ENABLE_NC4=OFF" >> $GITHUB_ENV
        if: matrix.use_nc4 == 'nc3'
      - run: |
          echo "ENABLE_HDF4=ON" >> $GITHUB_ENV
          echo "ENABLE_NC4=ON" >> $GITHUB_ENV
        if: matrix.use_nc4 == 'nc4'
      - run: echo "ENABLE_DAP=OFF" >> $GITHUB_ENV
        if: matrix.use_dap == 'dap_off'
      - run: echo "ENABLE_DAP=ON" >> $GITHUB_ENV
        if: matrix.use_dap == 'dap_on'
      - run: echo "CTEST_OUTPUT_ON_FAILURE=1" >> $GITHUB_ENV

###
# Fetch Cache
###

      - name: Fetch HDF Cache
        id: cache-hdf5
        uses: actions/cache@v2
        with:
          path: ~/environments/${{ matrix.hdf5 }}
          key: hdf5-${{ runner.os }}-${{ matrix.hdf5 }}

      - name: Check Cache
        shell: bash -l {0}
        run: ls ${HOME}/environments && ls ${HOME}/environments/${{ matrix.hdf5 }} && ls ${HOME}/environments/${{ matrix.hdf5}}/lib

###
# Configure and build
###

      - name: Perform out-of-directory build
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH} cmake .. -DENABLE_HDF4=${ENABLE_HDF4} -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH} -DENABLE_DAP=${ENABLE_DAP} -DENABLE_NETCDF_4=${ENABLE_NC4}

      - name: Print Summary
        shell: bash -l {0}
        run: |
          cd build
          cat libnetcdf.settings

      - name: Build All
        shell: bash -l {0}
        run: |
          cd build
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH} make -j 12
        if: ${{ success() }}

      - name: Run Tests
        shell: bash -l {0}
        run: |
          cd build
          LD_LIBRARY_PATH=${LD_LIBRARY_PATH} ctest -j 12 .
        if: ${{ success() }}
