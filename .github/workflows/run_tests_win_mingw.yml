###
# Build hdf4, hdf5 dependencies and cache them in a combined directory.
# See https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
# for information related to github runners.
###

name: Run MSYS2, MinGW64-based Tests


on: [ push ]

jobs:

  build-deps-mingw64:

    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}


    strategy:
      matrix:
        hdf5: [ 1.12.1 ]

    steps:

      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: git mingw-w64-x86_64-toolchain automake libtool autoconf make cmake mingw-w64-x86_64-hdf5 unzip

        ###
        # libhdf5
        ###
      - name: Cache libhdf5-${{ runner.os }}-${{ matrix.hdf5 }}
        id: cache-hdf5-mingw64
        uses: actions/cache@v2
        with:
          path: ~/environments/${{ matrix.hdf5 }}
          key: hdf5-${{ runner.os }}-${{ matrix.hdf5 }}

#####
# One-Off Autotools-based tests.
#####
  nc-ac-tests-oneoff-mingw64:

    needs: build-deps-mingw64
    runs-on: windows-latest

    strategy:
      matrix:
        hdf5: [ 1.12.1 ]
    steps:

      - uses: actions/checkout@v2

###
# Set Environmental Variables
###

#      - run: echo "CFLAGS=-I${HOME}/environments/${{ matrix.hdf5 }}/include" >> $GITHUB_ENV
#      - run: echo "LDFLAGS=-L${HOME}/environments/${{ matrix.hdf5 }}/lib" >> $GITHUB_ENV
#      - run: echo "LD_LIBRARY_PATH=${HOME}/environments/${{ matrix.hdf5 }}/lib" >> $GITHUB_ENV


###
# Fetch Cache
###

      - name: Fetch HDF Cache
        id: cache-hdf-mingw64
        uses: actions/cache@v2
        with:
          path: ~/environments/${{ matrix.hdf5 }}
          key: hdf5-${{ runner.os }}-${{ matrix.hdf5 }}

#      - name: Check Cache
#        shell: bash -l {0}
#        run: ls ${HOME}/environments && ls ${HOME}/environments/${{ matrix.hdf5 }} && ls ${HOME}/environments/${{ matrix.hdf5}}/lib

###
# Configure and build
###

      - name: Run autoconf
        run: autoreconf -if

      - name: Configure
        run: ./configure --enable-hdf5 --enable-dap --disable-dap-remote-tests
        if: ${{ success() }}

      - name: Look at config.log if error
        run: cat config.log
        if: ${{ failure() }}

      - name: Print Summary
        run: cat libnetcdf.settings

      - name: Build Library and Utilities
        run: make -j
        if: ${{ success() }}

      - name: Build Tests
        run: make check TESTS="" -j
        if: ${{ success() }}

      - name: Run Tests
        run: make check -j
        if: ${{ success() }}

#####
# One-Off CMake-based tests.
#####

  nc-cmake-tests-oneoff-mingw64:

    needs: build-deps-mingw64
    runs-on: windows-latest

    strategy:
      matrix:
        hdf5: [ 1.12.1 ]

    steps:

      - uses: actions/checkout@v2



###
# Fetch Cache
###

      - name: Fetch HDF Cache
        id: cache-hdf5-mingw64
        uses: actions/cache@v2
        with:
          path: ~/environments/${{ matrix.hdf5 }}
          key: hdf5-${{ runner.os }}-${{ matrix.hdf5 }}

###
# Configure and build
###

      - name: Perform out-of-directory build
        shell: bash -l {0}
        run: |
          mkdir build
          cd build
          cmake .. -DENABLE_DAP=TRUE -DENABLE_HDF5=TRUE -DENABLE_NCZARR=TRUE -D ENABLE_DAP_LONG_TESTS=TRUE

      - name: Print Summary
        run: |
          cd build
          cat libnetcdf.settings

      - name: Build All
        run: |
          cd build
          make -j 12
        if: ${{ success() }}

      - name: Run Tests
        run: |
          cd build
          ctest --output-on-failure -j 12 .
        if: ${{ success() }}

      - name: Verbose Output if CTest Failure
        run: |
          cd build
          ctest -j 12 --rerun-failed --output-on-failure -VV
        if: ${{ failure() }}
